#include <iostream>
#include <string>

struct Pokemon {
    std::string name;
    int level;
    std::string type;
    std::string ability;
    int hp;
    int attack;
    int defense;
};

struct PokemonNode {
    Pokemon pokemon;
    PokemonNode* next;
};

#include <iostream>
#include <string>
#include "PokemonNode.h" // Include the PokemonNode struct

struct Trainer {
    std::string name;
    PokemonNode* pokemons = nullptr;
};

void catchPokemon(Trainer& trainer, const Pokemon& pokemon) {
    PokemonNode* newPokemon = new PokemonNode{pokemon, nullptr};
    
    if (!trainer.pokemons) {
        trainer.pokemons = newPokemon;
    } else {
        PokemonNode* current = trainer.pokemons;
        while (current->next) {
            current = current->next;
        }
        current->next = newPokemon;
    }
    
    std::cout << trainer.name << " caught a new Pokemon!" << std::endl;
}

void displayTrainerPokemons(const Trainer& trainer) {
    std::cout << trainer.name << "'s Pokemons:" << std::endl;
    PokemonNode* current = trainer.pokemons;
    while (current) {
        std::cout << "Name: " << current->pokemon.name << std::endl;
        std::cout << "Level: " << current->pokemon.level << std::endl;
        std::cout << "Type: " << current->pokemon.type << std::endl;
        std::cout << "Ability: " << current->pokemon.ability << std::endl;
        std::cout << "HP: " << current->pokemon.hp << std::endl;
        std::cout << "Attack: " << current->pokemon.attack << std::endl;
        std::cout << "Defense: " << current->pokemon.defense << std::endl << std::endl;
        current = current->next;
    }
}

void trainTrainerPokemons(Trainer& trainer) {
    PokemonNode* current = trainer.pokemons;
    while (current) {
        current->pokemon.level++;
        std::cout << current->pokemon.name << " leveled up! New level: " << current->pokemon.level << std::endl;
        current = current->next;
    }
}

int calculateDamage(const Pokemon& attacker, const Pokemon& defender) {
    int damage = (((2 * attacker.level / 5 + 2) * attacker.attack * 40) / (defender.defense * 50)) + 2;
    return damage;
}

void battle(Trainer& trainer1, Trainer& trainer2) {
    std::cout << "Battle between " << trainer1.name << " and " << trainer2.name << "!" << std::endl;
    
    PokemonNode* pokemon1 = trainer1.pokemons;
    PokemonNode* pokemon2 = trainer2.pokemons;
    
    if (!pokemon1 || !pokemon2) {
        std::cout << "Both trainers must have at least one Pokemon to battle!" << std::endl;
        return;
    }
    
    while (pokemon1 && pokemon2) {
        std::cout << "-------------------------------------" << std::endl;
        std::cout << pokemon1->pokemon.name << " (Level " << pokemon1->pokemon.level << ") vs "
                  << pokemon2->pokemon.name << " (Level " << pokemon2->pokemon.level << ")" << std::endl;
        
        int damageToPokemon2 = calculateDamage(pokemon1->pokemon, pokemon2->pokemon);
        int damageToPokemon1 = calculateDamage(pokemon2->pokemon, pokemon1->pokemon);
        
        pokemon2->pokemon.hp -= damageToPokemon2;
        pokemon1->pokemon.hp -= damageToPokemon1;
        
        if (pokemon2->pokemon.hp <= 0) {
            std::cout << pokemon2->pokemon.name << " fainted!" << std::endl;
            pokemon2 = pokemon2->next;
        }
        if (pokemon1->pokemon.hp <= 0) {
            std::cout << pokemon1->pokemon.name << " fainted!" << std::endl;
            pokemon1 = pokemon1->next;
        }
        
        if (!pokemon2) {
            std::cout << trainer2.name << " is out of usable Pokemon!" << std::endl;
        }
        if (!pokemon1) {
            std::cout << trainer1.name << " is out of usable Pokemon!" << std::endl;
        }
    }
    
    std::cout << "-------------------------------------" << std::endl;
    std::cout << "Battle finished!" << std::endl;
}

int main() {
    Trainer ash = {"Ash", nullptr};
    Trainer gary = {"Gary", nullptr};
    
    Pokemon pikachu = {"Pikachu", 5, "Electric", "Static", 35, 55, 40};
    Pokemon charmander = {"Charmander", 3, "Fire", "Blaze", 39, 52, 43};
    Pokemon bulbasaur = {"Bulbasaur", 4, "Grass/Poison", "Overgrow", 45, 49, 49};
    Pokemon squirtle = {"Squirtle", 6, "Water", "Torrent", 44, 48, 65};
    Pokemon jigglypuff = {"Jigglypuff", 4, "Normal/Fairy", "Cute Charm", 115, 45, 20};
    Pokemon geodude = {"Geodude", 7, "Rock/Ground", "Rock Head", 40, 80, 100};
    
    catchPokemon(ash, pikachu);
    catchPokemon(ash, charmander);
    catchPokemon(ash, bulbasaur);
    
    catchPokemon(gary, squirtle);
    catchPokemon(gary, jigglypuff);
    catchPokemon(gary, geodude);
    
    displayTrainerPokemons(
